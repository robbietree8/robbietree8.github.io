<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title>robbietree's blog</title><link>https://robbietree8.github.io/</link><description>robbietree's blog</description><generator>Hugo -- gohugo.io</generator><language>en</language><lastBuildDate>Sat, 10 Apr 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://robbietree8.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>using keto</title><link>https://robbietree8.github.io/posts/2021-04-10-using-keto/</link><pubDate>Sat, 10 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2021-04-10-using-keto/</guid><description>Using Keto 解决什么问题 分布式的权限校验系统
上手 $ brew tap ory/keto $ brew install ory/keto/keto $ keto help 回顾 权限描述的是: 谁对资源拥有什么操作</description></item><item><title>using spock by example</title><link>https://robbietree8.github.io/posts/2021-04-04-using-spock/</link><pubDate>Sun, 04 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2021-04-04-using-spock/</guid><description>Using Spock 引言 Java 程序员最熟悉的单元测试框架莫过于 Junit，大多数人用的应该是4.x的版本，最新的5.x的版本相比4.x的版本增加了不少新的特性，写起单元测试来，也更加的得心应手，不过这篇文章不是来介绍 Junit 的，而是简单引荐下 Spock，号称是 jvm 下最好用的测试框架。</description></item><item><title>system design principles by example</title><link>https://robbietree8.github.io/posts/2021-04-02-system-design-principles/</link><pubDate>Fri, 02 Apr 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2021-04-02-system-design-principles/</guid><description>从todo-cli谈谈一些系统设计的原则 介绍 以实际的需求为切入点，谈谈在系统设计以及实现上哪些原则可以帮助我们更好的实现设计。
需求来自郑晔老师的代码之丑, 简单讲，就是一个简易的命令行todo应用。
原则解读 1. 分层设计 类设计图，具体代码可以下拉到参考链接
这是目前版本的类设计图，可以看到domain包作为核心功能的承载者，不依赖外部的类，这样做的好处是，外围的一些需求变化，不会导致核心功能的变更。</description></item><item><title>intellij idea tips</title><link>https://robbietree8.github.io/posts/2021-03-23-intellij-idea-tips/</link><pubDate>Tue, 23 Mar 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2021-03-23-intellij-idea-tips/</guid><description>Intellij IDEA tips IDEA提供了很多提效的工具，比如很多人喜欢的重构菜单，今天我们来了解下其他的工具。
Live Template 这个代码模版工具可以让你在IDE里配置常用的代码模版。
内置 写个main函数
写个for循环</description></item><item><title>bean mapping simplified</title><link>https://robbietree8.github.io/posts/2021-01-21-bean-mapping-simplified/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2021-01-21-bean-mapping-simplified/</guid><description>Bean mapping simplified 背景 对于分层应用程序来说，Java Bean之间的转换非常常见，比如从DTO -&amp;gt; BO，从 BO -&amp;gt; DO，那么如何选择一个既好用性能又好的转换工具呢？</description></item><item><title>mac first met</title><link>https://robbietree8.github.io/posts/2021-01-21-mac-first-met/</link><pubDate>Thu, 21 Jan 2021 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2021-01-21-mac-first-met/</guid><description>听说你买了 Mac 背景 听说很多同学买了 Mac，所以简单罗列下平常使用到的一些工具，可以参考参考。
工具介绍 homebrew 介绍 Mac 下安装工具或软件的必备工具1 如何安装 /usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.</description></item><item><title>plantuml guide</title><link>https://robbietree8.github.io/posts/2019-09-12-plantuml-guide/</link><pubDate>Thu, 12 Sep 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2019-09-12-plantuml-guide/</guid><description>文本绘图利器plantuml 应用场景 做系统设计免不了需要画图，从设计流程上来说，用例分析 -&amp;gt; 组件交互 -&amp;gt; 领域对象分析，往往不是一蹴而就的，需要一个反复迭代的过程，在这个过程中，如何更好的追溯你的设计变更很重要，不管后续维护的是你自己还是其他人，都可以从这个设计变更里得到重要的信息。
一个需求 这里以一个假想的需求为例，演示一下上述所述的画图场景
以顾客到餐馆用餐为例，需要经历顾客来餐厅吃饭，点菜，服务员下单，厨师出菜，服务员上菜，顾客结账的过程，下面我们来看怎么画这些图。</description></item><item><title>file operation on server</title><link>https://robbietree8.github.io/posts/2019-08-12-file-operation-on-server/</link><pubDate>Mon, 12 Aug 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2019-08-12-file-operation-on-server/</guid><description>服务器文件操作笔记 数据库备份
mysqldump -uroot -p -hlocalhost -P3306 db &amp;gt; /var/lib/mysql/db.sql 数据库恢复</description></item><item><title>influxdb notes</title><link>https://robbietree8.github.io/posts/2019-08-10-influxdb-notes/</link><pubDate>Sat, 10 Aug 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2019-08-10-influxdb-notes/</guid><description>InfluxDB学习笔记 notice: 学习笔记针对的版本是1.7
时序数据库的特点： 持续写入数据量大，数据和时间相关。读取操作相对较少，且通常读取的是一段时间范围内的数据。
存储 LSMTree
组件
目录结构</description></item><item><title>how to create a awesome gitlab project</title><link>https://robbietree8.github.io/posts/2019-08-09-how-to-create-a-awesome-gitlab-project/</link><pubDate>Fri, 09 Aug 2019 00:00:00 +0000</pubDate><author>作者</author><guid>https://robbietree8.github.io/posts/2019-08-09-how-to-create-a-awesome-gitlab-project/</guid><description>如何创建一个高质量高逼格的Gitlab工程项目 目录 高质量 高逼格 对自己好一点 参考 高质量 首先我们来定义一下什么是高质量，不同于美的定义（一千个读者可能有一千个哈姆雷特），对于高质量，我们可以达成一个共识。</description></item></channel></rss>